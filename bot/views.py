import telebot
import json
from telebot import types
from django.http import HttpResponse
from django.shortcuts import render
from django.conf import settings
from time import sleep

from .models import TGUsers
from vk_parser.models import Cities, Product–°ategory

from django.views.decorators.csrf import csrf_exempt

bot = telebot.TeleBot(settings.TG_TOKEN, threaded=False)


@csrf_exempt
def webhook(request):
    bot.process_new_updates([telebot.types.Update.de_json(request.body.decode("utf-8"))])
    return HttpResponse(status=200)


def makeInlineKeyboard_chooseCity(status_registration=False, chat_id: int = None):
    cities = Cities.objects.all()
    old_city = ''
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    if not status_registration:
        if chat_id:
            user = TGUsers.objects.get(chat_id=chat_id)
            old_city = user.city

    markup = types.InlineKeyboardMarkup()
    for city in cities:
        data = json.dumps({"city_id": city.id, "registration": status_registration})
        status = ''
        if city == old_city:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –¥–æ–ø–∏—Å—ã–≤–∞–µ–º ‚úÖ –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞
            status = ' ‚úÖ'

        markup.add(types.InlineKeyboardButton(text=str(city) + status, callback_data=data))
    return markup


def makeInlineKeyboard_chooseCategory():
    categories = Product–°ategory.objects.all()
    markup = types.InlineKeyboardMarkup()
    for cat in categories:
        data = json.dumps({"category_id": cat.id})
        markup.add(types.InlineKeyboardButton(text=str(cat), callback_data=data))
    return markup


def makeReplyKeyboard_main_menu():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    btn = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    markup.add(btn)
    return markup


def makeInlineKeyboard_setting():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='edit_city'))
    markup.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='edit_category'))
    markup.add(types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='close'))
    return markup


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    user = TGUsers.objects.filter(chat_id=chat_id)
    if user:
        user.delete()

    user = TGUsers()
    user.chat_id = chat_id  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.save()

    bot.send_message(chat_id=chat_id, text='–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¥–ª—è —Ñ—É–¥—à–µ—Ä–∏–Ω–≥–∞')
    bot.send_message(chat_id=chat_id,
                     text='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n'
                          '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥',
                     reply_markup=makeInlineKeyboard_chooseCity(status_registration=True))


last_data = {}  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline –∫–Ω–æ–ø–æ–∫ START ==================== #
@bot.callback_query_handler(func=lambda call: True)
def handle_query(message):
    global last_data
    chat_id = message.message.chat.id
    message_id = message.message.message_id
    data = message.data
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª –æ–¥–Ω—É –∏ —Ç—É –∂–µ –∫–Ω–æ–ø–∫—É –Ω–µ–∫–æ–ª—å–∫–æ —Ä–∞–∑ (—Å –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π)
    if chat_id in last_data.keys() and data == last_data[chat_id]:
        return
    last_data[chat_id] = data
    print(data)

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥
    if 'city_id' in data:
        data = json.loads(data)

        user = TGUsers.objects.get(chat_id=chat_id)
        city = Cities.objects.get(id=data['city_id'])  # –≥–æ—Ä–æ–¥ –ø–æ id
        user.city = city  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.save()

        if data['registration']:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            markup = makeInlineKeyboard_chooseCategory()
            markup.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='chooseCity'))
            markup.add(types.InlineKeyboardButton(text='‚û°Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚¨ÖÔ∏è', callback_data='end_reg'))
            bot.edit_message_text(message_id=message_id, chat_id=chat_id,
                                  text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                                  reply_markup=markup)
        else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            markup = makeInlineKeyboard_chooseCity(chat_id=chat_id)
            markup.add(types.InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save'))
            bot.edit_message_reply_markup(message_id=message_id, chat_id=chat_id,
                                          reply_markup=markup)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    elif 'chooseCity' in data:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = TGUsers.objects.filter(chat_id=chat_id)
        user.delete()
        bot.edit_message_text(message_id=message_id, chat_id=chat_id,
                              text='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, '
                                   '–ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n'
                                   '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥',
                              reply_markup=makeInlineKeyboard_chooseCity())

    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    elif 'category_id' in data:
        data = json.loads(data)
        old_markup = message.message.json['reply_markup']['inline_keyboard']
        markup = types.InlineKeyboardMarkup()

        for item in old_markup:
            callback_data = item[0]['callback_data']
            text = item[0]['text']
            if callback_data == message.data:
                category = Product–°ategory.objects.get(id=data['category_id'])
                if text[-1] == '‚úÖ':
                    text = text[:-1]
                    user = TGUsers.objects.get(chat_id=chat_id)
                    user.categories.remove(category)  # –£–¥–∞–ª—è–µ–º –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    user.save()
                else:
                    text += '‚úÖ'
                    user = TGUsers.objects.get(chat_id=chat_id)
                    user.categories.add(category)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    user.save()
            markup.add(types.InlineKeyboardButton(text=text, callback_data=callback_data))

        bot.edit_message_reply_markup(message_id=message_id, chat_id=chat_id,
                                      reply_markup=markup)
        del last_data[chat_id]

    elif 'end_reg' in data:
        bot.edit_message_text(message_id=message_id, chat_id=chat_id,
                              text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!üòâ\n'
                                   '–°–∫–æ—Ä–æ –í—ã –Ω–∞—á–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–∞–∑–¥–∞—á–∞—Ö\n\n'
                                   '–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n'
                                   '–¢–∞–º –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ '
                                   '–æ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')

        bot.send_message(chat_id=chat_id, text='–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                                               '/info - —á—Ç–æ —Ç–∞–∫–æ–µ –§—É–¥—à–µ—Ä–∏–Ω–≥\n'
                                               '/change_city - –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥\n'
                                               '/change_categories - –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n'
                                               '/help - —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n',
                         reply_markup=makeReplyKeyboard_main_menu())
    elif 'edit_category' in data:
        user = TGUsers.objects.get(chat_id=chat_id)
        user_categories = user.categories.all()
        categories = Product–°ategory.objects.all()
        markup = types.InlineKeyboardMarkup()

        for cat in categories:
            if cat in user_categories:
                status = ' ‚úÖ'
            else:
                status = ''
            callback_data = json.dumps({"category_id": cat.id})
            markup.add(types.InlineKeyboardButton(text=str(cat) + status, callback_data=callback_data))
        markup.add(types.InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save'))

        bot.edit_message_text(message_id=message_id, chat_id=chat_id, text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                              reply_markup=markup)

    elif 'edit_city' in data:
        markup = makeInlineKeyboard_chooseCity(chat_id=chat_id)
        markup.add(types.InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save'))
        bot.edit_message_text(message_id=message_id, chat_id=chat_id, text='–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥',
                              reply_markup=markup)


    elif 'close' in data:
        bot.delete_message(chat_id=chat_id, message_id=message_id)
    elif 'save' in data:
        bot.delete_message(chat_id=chat_id, message_id=message_id)
        bot.send_message(chat_id=chat_id, text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã')


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline –∫–Ω–æ–ø–æ–∫ END ==================== #


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ START==================== #
@bot.message_handler(content_types=['text'])
def text(message):
    chat_id = message.chat.id
    data = message.text

    if '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' in data:
        bot.send_message(chat_id=chat_id, text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è', reply_markup=makeInlineKeyboard_setting())


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ END==================== #

def start_bot(request):
    if settings.DEBUG:
        bot.skip_pending = True
        bot.remove_webhook()
        print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
        bot.polling(none_stop=True, interval=0)
    else:
        return HttpResponse('DEBUG False')


# ==================== WEBHOOK ==================== #
if not settings.DEBUG:
    bot.remove_webhook()
    sleep(1)
    bot.set_webhook(url=settings.BOT_HOST + 'bot/' + settings.TG_TOKEN)
